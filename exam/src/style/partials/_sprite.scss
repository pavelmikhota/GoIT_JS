/*
  SASS variables are information about icon's compiled state, stored under its original file name

  .icon-home
    width: $icon-home-width

  The large array-like variables contain all information about a single icon
  $icon-home: x y offset_x offset_y width height total_width total_height image_path

  At the bottom of this section, we provide information about the spritesheet itself
  $spritesheet: width height image $spritesheet-sprites
  */
$1-ico-user-tv-name: '1_ico_user_tv'
$1-ico-user-tv-x: 0px
$1-ico-user-tv-y: 0px
$1-ico-user-tv-offset-x: 0px
$1-ico-user-tv-offset-y: 0px
$1-ico-user-tv-width: 40px
$1-ico-user-tv-height: 40px
$1-ico-user-tv-total-width: 165px
$1-ico-user-tv-total-height: 40px
$1-ico-user-tv-image: 'ico_sprite_users.png'
$1-ico-user-tv: (0px, 0px, 0px, 0px, 40px, 40px, 165px, 40px, 'ico_sprite_users.png', '1_ico_user_tv', )
$2-ico-user-tea-name: '2_ico_user_tea'
$2-ico-user-tea-x: 41px
$2-ico-user-tea-y: 0px
$2-ico-user-tea-offset-x: -41px
$2-ico-user-tea-offset-y: 0px
$2-ico-user-tea-width: 40px
$2-ico-user-tea-height: 40px
$2-ico-user-tea-total-width: 165px
$2-ico-user-tea-total-height: 40px
$2-ico-user-tea-image: 'ico_sprite_users.png'
$2-ico-user-tea: (41px, 0px, -41px, 0px, 40px, 40px, 165px, 40px, 'ico_sprite_users.png', '2_ico_user_tea', )
$3-ico-user-science-name: '3_ico_user_science'
$3-ico-user-science-x: 82px
$3-ico-user-science-y: 0px
$3-ico-user-science-offset-x: -82px
$3-ico-user-science-offset-y: 0px
$3-ico-user-science-width: 41px
$3-ico-user-science-height: 40px
$3-ico-user-science-total-width: 165px
$3-ico-user-science-total-height: 40px
$3-ico-user-science-image: 'ico_sprite_users.png'
$3-ico-user-science: (82px, 0px, -82px, 0px, 41px, 40px, 165px, 40px, 'ico_sprite_users.png', '3_ico_user_science', )
$4-ico-user-plane-name: '4_ico_user_plane'
$4-ico-user-plane-x: 124px
$4-ico-user-plane-y: 0px
$4-ico-user-plane-offset-x: -124px
$4-ico-user-plane-offset-y: 0px
$4-ico-user-plane-width: 41px
$4-ico-user-plane-height: 40px
$4-ico-user-plane-total-width: 165px
$4-ico-user-plane-total-height: 40px
$4-ico-user-plane-image: 'ico_sprite_users.png'
$4-ico-user-plane: (124px, 0px, -124px, 0px, 41px, 40px, 165px, 40px, 'ico_sprite_users.png', '4_ico_user_plane', )
$spritesheet-width: 165px
$spritesheet-height: 40px
$spritesheet-image: 'ico_sprite_users.png'
$spritesheet-sprites: ($1-ico-user-tv, $2-ico-user-tea, $3-ico-user-science, $4-ico-user-plane, )
$spritesheet: (165px, 40px, 'ico_sprite_users.png', $spritesheet-sprites, )

/*
  The provided mixins are intended to be used with the array-like variables

  .icon-home
    @include sprite-width($icon-home)

  .icon-email
    @include sprite($icon-email)

  Example usage in HTML:
    `display: block` sprite:
    <div class="icon-home"></div>

  To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
    // CSS
    .icon {
      display: inline-block;
    }

    // HTML
    <i class="icon icon-home"></i>
  */
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

/*
  The `sprites` mixin generates identical output to the CSS template
    but can be overridden inside of SASS

  @include sprites($spritesheet-sprites)
  */
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
